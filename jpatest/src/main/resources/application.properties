spring.application.name=jpatest

server.port=8080

spring.mvc.hiddenmethod.filter.enabled=true

# 기본 데이터베이스 설정 정보
spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/testfull503db?characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.hikari.username=test1
spring.datasource.hikari.password=full503
spring.datasource.hikari.connection-test-query=SELECT 1

#   JPA 는 스프링 프레임워크에서 사용하는 ORM
#   JPA 는 각 기능의 동작이 어떻게 되어야 하는지에 대해서 정의한 기술 명세이며, 이 기술 명세에 따라 구현된 프로그램이 JPA Provider 라고 함
#   현재 가장 유명한 JPA Provider 가 hibernate 임

#   JPA 설정 정보

#   JPA 에서 사용할 수 있는 DB 종류를 설정
#   DB2, DERBY, H2, HANA, INFORMIX, MYSQL(MARIADB), ORACLE, POSTGRESQL, SQL_SERVER, SYBASE 등을 사용할 수 있음
spring.jpa.database=mysql

#   데이터베이스 엔진 설정
#   MySQL 의 엔진을 설정
#   현재 거의 모든 MySQL은 InnoDB 를 사용함
#   JPA에서 엔진 종류를 선택하지 않을 경우, 'MyISAM' 을 기본으로 사용함 (MySQL 5버전 사용 시)
#   MySQL5Dialect, MySQL5InnoDBDialect, MySQL57Dialect, MySQL8Dialect
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
#   mysql 엔진 종류 설정 다른 방법
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.properties.hibernate.dialect.storage_engine=innodb

#   JPA 를 사용하여 엔티티 연관관계를 바탕으로 자동 실행
#   실제 운용 환경에서는 false 로 설정
spring.jpa.generate-ddl=true

#   위의 generate-ddl 옵션과 함께 사용하여 프로그램 시작 시 데이터베이스 생성 방식을 결정하는 옵션
#   실제 운용 환경에서는 create, create-drop, update 는 절대 사용하면 안됨 (기존 데이터가 삭제 됨)
#   create : 시작 시 데이터베이스 생성, 기존 테이블 삭제 후 생성 (개발 초기 단계에서 사용)
#   create-drop : 시작 시 데이터베이스 생성, 종료 시 데이터베이스 삭제 (개발 초기 단계에서 사용)
#   update : Entity의 변경 사항이 있을 경우 데이터베이스를 수정 (테스트 서버에서 사용, 개발 중간 단계에서 사용)
#   validate : Entity와 실제 데이터베이스의 테이블이 정상적으로 맵핑되어 있는지 확인, 같지 않으면 프로그램 종료 (실제 운용 환경에서 사용, 테스트 서버에서 사용)
#   none : 아무런 작업 없음 (실제 운용 환경에서 사용)
spring.jpa.hibernate.ddl-auto=create

#   스프링 프레임워크의 resources 폴더 아래에 schema.sql, data.sql 파일 있을 경우 해당 파일 안에 있는 sql 쿼리문을 실행
#   schema.sql : ddl 명령을 입력하여 사용
#   data.sql : dml 명령을 입력하여 사용
#   ALWAYS : mysql, oracle 과 같은 외부 DB 사용 시 사용
#   EMBEDDED : 스프링 내장 DB인 H2, HSQL, DERBY 사용 시 사용
#   NAVER : SQL 초기화 안함

#   스프링부트 2.4.x 버전까지는 아래의 옵션을 사용
#spring.datasource.initialization-mode=always
#   스프링부터 2.5.x 버전 이후부터는 아래의 옵션을 사용
spring.sql.init.mode=always

#   resources 폴더 아래에 schema.sql, data.sql 파일이 존재하고, 설정에 'spring.jpa.hibernate.ddl-auto' 설정이 동시에 존재할 경우 sql 파일을 먼저 실행하고, JPA에 의한 데이터베이스 생성을 나중에 실행하도록 하는 옵션
#   JPA 실행 후 sql 파일 실행을 원할 경우 아래의 옵션을 실행
spring.jpa.defer-datasource-initialization=true
#   SQL 파일을 통해서만 데이터베이스 생성을 원할 경우 'spring.jpa.hibernate.ddl-auto=none' 으로 설정

#   JPA에 의해서 실행되는 SQL 쿼리문을 콘솔에 출력
spring.jpa.show-sql=true

#   JPA에 의해서 실행되는 SQL 쿼리문을 사용자가 보기 좋게 변경함
spring.jpa.properties.hibernate.format_sql=true


#   JPA 를 사용하여 데이터 추가 시 새로운 ID를 생성하는 옵션
#   MySQL에서는 ai 옵션을 사용하므로 false 로 설정
#   Spring 6 (Spring boot 3) 부터는 사용되지 않는 옵션
#spring.jpa.hibernate.use-new-generator-mappings=false











